##[[
cinclude '<time.h>'

cemitdecl([==[
typedef struct tm tm_t;
typedef struct timespec timespec_t;
]==])

local neluatypes = require 'nelua.types'
]]

local clock_t <cimport'clock_t',nodecl> = #[neluatypes.IntegralType('clock_t', primtypes.clong.size)]#
local time_t <cimport'time_t',nodecl> = #[neluatypes.IntegralType('time_t', primtypes.clong.size)]#
local tm <cimport'tm_t',nodecl> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint
}
local timespec <cimport'timespec_t',nodecl> = @record {
  tv_sec: time_t,
  tv_nsec: clong
}

-- Time manipulation
function C.clock(): clock_t <cimport'clock',nodecl> end
function C.difftime(time1: time_t, time0: time_t): float64 <cimport'difftime',nodecl> end
function C.mktime(tp: *tm): time_t <cimport'mktime',nodecl> end
function C.strftime(s: cstring, maxsize: csize, format: cstring, tp: *tm): csize <cimport'strftime',nodecl> end
function C.time(timer: *time_t): time_t <cimport'time',nodecl> end

-- Conversion
function C.asctime(tp: *tm): cstring <cimport'asctime',nodecl> end
function C.ctime(timer: *time_t): cstring <cimport'ctime',nodecl> end
function C.gmtime(timer: *time_t): *tm <cimport'gmtime',nodecl> end
function C.localtime(timer: *time_t): *tm <cimport'localtime',nodecl> end
function C.timespec_get(ts: *timespec, base: cint): cint <cimport'timespec_get',nodecl> end

-- Constants
global C.CLOCKS_PER_SEC: clock_t <const,cimport'CLOCKS_PER_SEC',nodecl>
