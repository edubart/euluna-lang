✔ lexer @done (11/5/2017, 4:21:17 PM)
✔ parser @done (11/5/2017, 4:21:20 PM)
✔ basic operators @done (11/5/2017, 4:21:37 PM)
✔ binary operators @done (11/5/2017, 4:21:42 PM)
✔ primitives @done (11/5/2017, 4:22:25 PM)
✔ escaping sequences @done (11/5/2017, 4:22:30 PM)
✔ function as arguments @done (11/5/2017, 4:15:06 PM)
✔ function calls @done (11/5/2017, 4:15:05 PM)
✔ variable declaration @done (11/5/2017, 4:15:09 PM)
✔ function declaration @done (11/5/2017, 4:15:12 PM)
✔ variable assignment @done (11/5/2017, 4:15:15 PM)
✔ if @done (11/5/2017, 4:15:18 PM)
✔ ternary if @done (11/5/2017, 4:15:23 PM)
✔ while @done (11/5/2017, 4:15:26 PM)
✔ do @done (11/5/2017, 4:15:42 PM)
✔ repeat @done (11/5/2017, 4:15:45 PM)
✔ for num @done (11/5/2017, 4:15:49 PM)
✔ for in @done (11/5/2017, 4:15:55 PM)
✔ basic builin iterator @done (11/5/2017, 4:16:05 PM)
✔ break @done (11/5/2017, 4:16:08 PM)
✔ continue @done (11/5/2017, 4:16:12 PM)
✔ goto @done (11/5/2017, 4:16:15 PM)
✔ switch @done (11/5/2017, 4:16:24 PM)
✔ exceptions @done (11/5/2017, 4:16:26 PM)
✔ defer @done (11/5/2017, 4:16:38 PM)
✔ const (constexpr) @done (11/5/2017, 5:33:15 PM)
✔ return multiple values @done (11/5/2017, 5:59:50 PM)
✔ assign multiple values (swap like a,b = b, a) @done (11/5/2017, 5:16:36 PM)
☐ pointerof
☐ deref
☐ delete
☐ new
☐ include
☐ parse optional types
☐ as (type casting)
☐ export (modules)
☐ import (modules)
☐ inplace operators
☐ named operators
☐ enum
☐ object
☐ sugar for declaring object functions
☐ extends (object inheretance)
☐ smart pointers
☐ varargs
☐ iterator
☐ emit asm/C++ code
☐ create operators: mod, bor, xor, band, bnot, idiv
☐ use const& only if is not a primitive (better performance on gcc godbolt)
☐ lazy declaration (needs type deduction preprocessing)
☐ libraries (math, io, string)
☐ operator overloading

think more:
  ☐ tuple
  ☐ union
  ☐ variant
  ☐ any
  ☐ array
  ☐ table
  ☐ nil
  ☐ arrow operators ? (-> and =>) ?

later:
  ☐ custom operators
  ☐ pragmas
  ☐ macro
  ☐ templates
  ☐ astmacro
  ☐ literal
  ☐ async

even later:
  ☐ concepts
  ☐ generics

even laterer:
  ☐ lua binder

think more:
  ☐ make / always produce double or float
  ☐ make / work as C, add fdiv and idiv operators to enforce

